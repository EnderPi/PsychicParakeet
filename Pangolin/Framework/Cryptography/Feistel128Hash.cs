using EnderPi.Framework.Random;
using System;
using System.Collections.Generic;
using System.Text;

namespace EnderPi.Framework.Cryptography
{
    /// <summary>
    /// Unkeyed, non-cryptographic hash
    /// </summary>
    public class Feistel128Hash
    {
        private ulong _multiplier = 1518061951166098093UL;      //chosen for high average avalanche of ~20.2

        private static int[] RotateConstants = new int[] {13,
42,40,42,52,51,7,57,22,51,3,
57,63,32,38,41,27,40,11,6,35,
48,40,1,34,48,19,8,55,54,16,
53,32,44,6,1,36,18,34,30,38,
52,60,57,41,40,36,40,32,27,5,
40,51,50,48,48,15,38,57,62,30,
38,13,9,44,21,26,63,11,24,53,
29,51,22,21,22,58,13,15,61,62,
19,52,16,52,48,37,19,43,48,63,
33,33,23,57,42,39,20,14,63,13,
25,61,4,59,15,31,12,30,49,9,
38,44,48,1,63,8,10,35,46,55,
9,25,62,12,46,11,25,55,59,28,
33,61,18,35,60,24,34,20,9,63,
56,12,51,31,27,54,20,38,36,49,
4,30,47,59,38,40,39,51,6,28,
52,40,7,27,3,21,31,40,4,18,
11,5,48,11,61,29,19,44,58,47,
5,43,55,26,36,16,13,12,63,51,
32,50,28,57,1,26,14,48,17,25,
22,43,60,2,50,34,6,46,26,53,
51,20,18,8,6,18,47,15,55,27,
7,5,59,8,62,32,56,53,43,6,
36,37,23,15,54,6,51,1,5,45,
29,17,34,50,17,34,13,7,21,53,
48,8,32,8,59,17,30,7,60,27,
6,41,59,28,2,25,39,36,52,10,
61,21,1,22,43,26,44,34,59,29,
39,58,47,57,58,6,11,7,50,55,
42,30,25,28,11,27,18,28,1,1,
59,46,3,1,6,20,51,26,1,37,
51,56,59,10,62,30,26,10,45,12,
27,55,35,52,48,11,43,40,57,7,
4,36,16,19,63,47,50,38,17,18,
59,12,17,4,3,8,1,26,16,40,
26,40,2,30,9,26,6,38,38,24,
34,7,51,33,51,19,6,40,61,46,
22,13,63,14,22,39,58,51,25,8,
38,8,30,60,51,43,9,32,18,6,
28,37,20,25,8,56,36,7,19,52,
49,25,22,36,61,16,19,9,61,23,
4,35,44,40,50,49,29,31,33,14,
39,37,15,4,53,50,62,63,33,39,
28,39,33,12,31,14,2,6,18,15,
48,33,3,5,30,16,8,59,4,48,
52,45,38,16,39,2,63,54,6,52,
4,60,12,40,63,34,47,34,34,27,
63,57,11,8,4,9,2,6,8,50,
50,63,48,30,33,61,49,34,10,8,
44,59,44,60,50,14,9,10,8,25,
12,45,32,18,23,17,39,5,26,2,
39,59,14,53,42,60,8,20,59,43,
42,51,10,30,11,29,12,28,37,53,
63,62,44,35,16,31,31,18,26,44,
63,15,51,23,40,18,1,27,56,9,
13,49,41,47,50,28,36,40,18,50,
62,50,27,13,56,48,42,38,45,56,
46,59,5,63,40,62,35,24,46,60,
10,41,47,4,8,8,13,47,15,43,
29,20,13,28,55,37,62,34,25,50,
25,9,26,54,18,45,36,63,57,29,
35,18,38,45,27,52,30,15,48,4,
44,45,58,11,39,8,33,20,22,52,
2,19,59,63,52,50,47,43,7,25,
12,4,58,23,49,45,55,38,63,28,
47,14,37,62,34,53,40,4,44,4,
25,4,2,33,32,32,54,63,20,10,
12,37,22,9,33,19,36,11,11,62,
18,45,5,2,62,48,52,32,54,53,
46,37,48,58,9,34,7,8,41,29,
37,2,63,54,58,29,17,10,11,49,
27,3,21,43,35,22,36,28,56,57,
57,14,34,50,13,44,33,50,59,63,
4,14,54,21,28,10,41,24,41,56,
52,25,48,57,61,48,55,38,26,43,
29,38,21,31,33,15,46,41,36,55,
2,11,17,46,29,59,38,2,29,4,
25,30,59,28,29,37,22,15,45,23,
12,35,21,10,8,29,32,19,36,27,
13,47,11,5,38,32,36,57,34,32,
48,19,15,31,14,14,36,16,32,59,
48,57,11,9,4,29,49,34,10,1,
42,62,22,42,11,8,32,13,34,21,
54,7,45,23,1,32,22,46,26,23,
21,4,14,21,32,14,61,45,18,57,
62,29,48,31,50,1,17,61,51,4,
55,50,18,50,42,1,37,45,61,23,
56,15,16,41,23,62,30,54,62,35,
24,60,9,35,55,37,10,2,36,53,
3,29,22,22,63,19,32,14,3,19,
59,17,19,41,33,57,9,22,8,14,
61,16,23,17,27,62,42,55,8,20,
24,8,49,55,42,9,37,46,62,61,
40,59,50,35,40,28,6,27,45,59,
25,1,4,51,20,49,4,45,40,4,
18,1,20,26,60,55,1,46,29,27,
28,31,20,6,17,5,49,54,4,63,
35,34,51,17,56,17,42,25,10,15,
6,15,31,47,14,43,13,20,5,8,
13,15,13,1,61,57,61,9,21 };
                               

        public Feistel128Hash() { }

        public int[] GetKeys(ulong a, ulong b)
        {
            List<int> keys = new List<int>(64);
            ulong left = a;
            ulong right = b;
            ulong temp;
            int j = 0;
            do
            {
                for (int i=0; i < 12; i++)
                {
                    temp = right;
                    right = left ^ RandomHelper.RotateLeft(right * _multiplier, RotateConstants[j]);
                    left = temp;
                    j++;
                }
                //todo get this to be non-zero.
                keys.Add(Convert.ToInt32(right & 63UL));
            } while (keys.Count < 64);
            return keys.ToArray();
        }
    }
}
