@using EnderPi.Framework.Simulation.Genetic;
@using System.Threading;
@using EnderPi.Framework.Services;
@using EnderPi.Framework.DataAccess;
@using EnderPi.Framework.BackgroundWorker;
@using EnderPi.Framework.Threading;
@using LogViewer.Models;
@using System.IO;
@using System.Drawing.Imaging;
@using EnderPi.Framework.Logging;
@using System.Timers; 

@page "/genetics"
@attribute [Authorize]
@inject IConfigurationDataAccess configurationDataAccess;
@inject EnderPi.Framework.BackgroundWorker.IBackgroundTaskManager backgroundTaskManager;
@inject EnderPi.Framework.Logging.Logger logger;




<h3>Genetic Programming for Random Number Generators</h3>

<div>
    <div>
        <table>
            <tr>
                <td>
                    <EditForm Model="_model">
                        <table class="table" style="table-layout:fixed">
                            <tr>
                                <td class="flex-nowrap">Test Level:</td>
                                <td>
                                    <InputSelect @bind-Value="@_model.Level" TValue=EnderPi.Framework.Simulation.RandomnessTest.TestLevel>
                                        @foreach (var level in Enum.GetValues(typeof(EnderPi.Framework.Simulation.RandomnessTest.TestLevel)))
                                        {
                                        @if ((EnderPi.Framework.Simulation.RandomnessTest.TestLevel)level  != EnderPi.Framework.Simulation.RandomnessTest.TestLevel.Adhoc)
                                            {
                                        <option value="@level">@level</option>
                                            }
                                        }
                                    </InputSelect>
                                </td>
                                <td>Mode:</td>
                                <td>
                                    <InputSelect @bind-Value="@_model.Mode" TValue=EnderPi.Framework.Simulation.Genetic.ConstraintMode>
                                        @foreach (var mode in Enum.GetValues(typeof(EnderPi.Framework.Simulation.Genetic.ConstraintMode)))
                                        {
                                        <option value="@mode">@mode</option>
                                        }
                                    </InputSelect>
                                </td>
                                <td class="flex-nowrap">Cost Mode:</td>
                                <td>
                                    <InputSelect @bind-Value="@_model.CostMode" TValue=EnderPi.Framework.Simulation.Genetic.GeneticCostMode>
                                        @foreach (var mode in Enum.GetValues(typeof(EnderPi.Framework.Simulation.Genetic.GeneticCostMode)))
                                        {
                                        <option value="@mode">@mode</option>
                                        }
                                    </InputSelect>
                                </td>
                                <td width="100">
                                    @if (_running)
                                    {
                                        <button class="btn btn-primary">Running....</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-primary" @onclick="@(()=>HandleStartClick())">Start</button>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-primary" @onclick="@(()=>HandleStopClick())">Stop</button>
                                </td>
                            </tr>
                        </table>
                    </EditForm>

                </td>                
            </tr>
        </table>        
    </div>    
    <div>
        <table class="table">
            <tr>
                <td>Current Generation:</td>
                <td>@_currentGeneration</td>
                <td>Median Fitness:</td>
                <td>@_medianFitness</td>
            </tr>            
        </table>
        <br />
        <table class="table" style="table-layout:fixed">
            @if (_bestSpecies != null && _randomSpecies != null)
            {
            <tr>
                <td>Specimen</td>
                <td>@_bestSpecies.Name (Current Best)</td>
                <td>@_randomSpecies.Name (Random Pick)</td>
            </tr>
            <tr>
                <td>Fitness / Test Passed</td>
                <td>@_bestSpecies.Fitness.ToString("N0")  /  @_bestSpecies.TestsPassed</td>
                <td>@_randomSpecies.Fitness.ToString("N0")  /  @_randomSpecies.TestsPassed</td>
            </tr>            
            <tr>
                <td>Node Count / Cost</td>
                <td>@_bestSpecies.NodeCount  /  @_bestSpecies.TotalCost.ToString("F1")</td>
                <td>@_randomSpecies.NodeCount  /  @_randomSpecies.TotalCost.ToString("F1")</td>
            </tr>                        
            <tr>
                <td>Birth Generation / Average Node Generation:</td>
                <td>@_bestSpecies.Generation  /  @_bestSpecies.GetAverageNodeAge().ToString("N2")</td>
                <td>@_randomSpecies.Generation  /  @_randomSpecies.GetAverageNodeAge().ToString("N2")</td>
            </tr>
            <tr>
                <td>Randomness Visual</td>
                <td>
                    <img id="scatterPlot" src=@_bestSpecies.ImageString width="256" />
                </td>
                <td>
                    <img id="outputGraph" src=@_randomSpecies.ImageStringSquished width="256" />
                </td>
            </tr>
            <tr>
                <td>State One Function (A):</td>
                <td>@_bestSpecies.GetTreeRoot(1).EvaluatePretty()</td>
                <td>@_randomSpecies.GetTreeRoot(1).EvaluatePretty()</td>
            </tr>
            <tr>
                <td>State Two Function (B):</td>
                <td>@_bestSpecies.GetTreeRoot(2).EvaluatePretty()</td>
                <td>@_randomSpecies.GetTreeRoot(2).EvaluatePretty()</td>
            </tr>
            <tr>
                <td>Output Function:</td>
                <td>@_bestSpecies.GetTreeRoot(3).EvaluatePretty()</td>
                <td>@_randomSpecies.GetTreeRoot(3).EvaluatePretty()</td>
            </tr>

            }
        </table>
    </div>
</div>


@code {

    private string _medianFitness;

    private GeneticParametersModel _model;

    private RngSpecies _bestSpecies;

    private RngSpecies _randomSpecies;

    private bool _running = false;

    private string _currentGeneration;

    private CancellationTokenSource _source;

    private System.Timers.Timer _timer;

    private List<List<RngSpecies>> _allSpecimens;

    private object _padlock;

    private EnderPi.Framework.Random.Sha256 _randomEngine;

    protected override void OnInitialized()
    {
        _padlock = new object();
        _randomEngine = new EnderPi.Framework.Random.Sha256();
        _model = new GeneticParametersModel();
        _model.Level = EnderPi.Framework.Simulation.RandomnessTest.TestLevel.One;
        AssignSpecies(new RngSpecies());
        _timer = new System.Timers.Timer(60 * 1000);
        _timer.Elapsed += HandleTimerEvent;
        _timer.AutoReset = true;
    }

    public Genetics()
    {

    }

    private void HandleTimerEvent(object source, ElapsedEventArgs e)
    {
        bool lockwasTaken = false;
        try
        {
            System.Threading.Monitor.TryEnter(_padlock, 10, ref lockwasTaken);
            if (lockwasTaken)
            {
                if (_allSpecimens != null && _allSpecimens.Count > 0)
                {
                    var which = _randomEngine.NextInt(0, _allSpecimens.Count - 1);
                    var nonZeroElements = _allSpecimens[which].Where(x=>x.Fitness > 0).ToList();
                    int whichElement = _randomEngine.NextInt(0, nonZeroElements.Count - 1);
                    _randomSpecies = nonZeroElements[whichElement];
                    _randomSpecies.NameConstants();
                    var bitmap = _randomSpecies.GetImageBitMap();
                    MemoryStream ms = new MemoryStream();
                    bitmap.Save(ms, ImageFormat.Gif);
                    var directory = configurationDataAccess.GetGlobalSettingString(EnderPi.Framework.Pocos.GlobalSettings.GeneticGifSaveDirectory);
                    if (!string.IsNullOrWhiteSpace(directory))
                    {
                        string fileName = "C:\\Users\\Adam\\Pictures\\Genetics" + "\\" + _randomSpecies.Name + ".gif";
                        if (!File.Exists(fileName))
                        {
                            File.WriteAllBytes(fileName, _randomSpecies.AnimatedGif);
                        }
                    }
                }
            }
        }
        finally
        {
            if (lockwasTaken)
            {
                System.Threading.Monitor.Exit(_padlock);
                InvokeAsync(() => StateHasChanged());
            }
        }

    }
    /// <summary>
    /// Starts the simulation
    ///
    ///</summary>
    public void HandleStartClick()
    {
        _allSpecimens = new List<List<RngSpecies>>();
        AssignSpecies(null);
        _randomSpecies = null;
        _currentGeneration = null;
        _medianFitness = null;
        _running = true;
        Task.Factory.StartNew(BackgroundTaskDelegate);
        _timer.Enabled = true;

    }

    public void BackgroundTaskDelegate()
    {
        var parameters = new GeneticParameters();
        parameters.Level = _model.Level;
        parameters.Mode = _model.Mode;
        parameters.CostMode = _model.CostMode;
        var geneticTask = new GeneticRngBreeding(parameters);
        try
        {
            geneticTask.GenerationFinished += UpdateGeneration;

            _source = new CancellationTokenSource();
            var provider = new ServiceProvider();
            provider.RegisterService<IConfigurationDataAccess>(configurationDataAccess);
            provider.RegisterService<IBackgroundTaskManager>(backgroundTaskManager);
            provider.RegisterService<EnderPi.Framework.Logging.Logger>(logger);
            geneticTask.Start(_source.Token, provider, 0, false);
            AssignSpecies(geneticTask.Best);
            _currentGeneration = geneticTask.Generations.ToString("N0");
        }
        catch (Exception ex)
        {
            var details = new LogDetails();
            details.AddDetail("Exception", ex.ToString());
            logger.Log("Error Running Simulation!", LoggingLevel.Error, details);
        }
        finally
        {
            _source.Dispose();
            _running = false;
            InvokeAsync(() => StateHasChanged());
            geneticTask.GenerationFinished -= UpdateGeneration;
            _timer.Enabled = false;

        }
    }

    public void AssignSpecies(RngSpecies species)
    {
        if (species != null)
        {
            species.NameConstants();
        }
        _bestSpecies = species;
    }

    private void UpdateGeneration(object sender, GeneticEventArgs e)
    {
        try
        {
            if (e != null && e.ThisGeneration != null)
            {
                lock (_padlock)
                {
                    _allSpecimens.Add(e.ThisGeneration);
                    var bestSpecimen = e.ThisGeneration[0];
                    AssignSpecies(bestSpecimen);
                    _currentGeneration = e.Generation.ToString("N0");
                    _medianFitness = e.ThisGeneration[e.ThisGeneration.Count / 2].Fitness.ToString("N0");
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            logger.Log(ex.ToString(), LoggingLevel.Error);
        }
    }

    /// <summary>
    /// Stops the simulation
    ///</summary>
    public void HandleStopClick()
    {
        Threading.ExecuteWithoutThrowing(()=> _source.Cancel());
    }




}
